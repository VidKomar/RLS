# Comment; """ Multiline Comment """
Variables int, float, str
    Get type = type(var)
    Začetek non-int, je case sensitive, ne keywords
    camelCase is friend; OrPascalCase; sometimes_snake_case

    en var vsaki value:
        x, y = "x1", "y1"
    en value večin var:
        x = y = "x1"
    Unpacking:
        črke = ["x1", "y1"]
        x, y = črke

    Print("string", int)

    Global = izven funkcije. Uporabla znotraj ali zunaj funk. Kliči wherever?
    Local = Če definiraš znotraj fukcije. global x znotraj funk. jo naredi global.

Data types
	String
		x = str("Vid")
		Slicing x[1:2]; From start x[:2]; To end x[2:]; Reverse x[-2:-1]

		Concatenate, combine, join: x + " " + y
		Format - combine int, str...: x = "Vid, visok {1}, širok {2}, star {0}"
			x.format(starost, višina, širina)     (num = idx seq. in format)
		Escape char. \' = '; \\ = \; \n = newline; \t = tab...
		
		Different string methods LIST: https://www.w3schools.com/python/python_strings_methods.asp
		eg.	Upper/lower case: x.upper() x.lower()
			Remove blank at begining or end: x.strip()
			Replace letter or string part: x.replace("d", "t") -> ["Vit"]
			Split into substring: x.split("i") -> ["V", "d"]
			
    Numeric = int(2) poz. or neg.
     float(2.0) poz. or neg.; exp = 1e5
     complex(2j)
    Sequences (zaporedja) =
        list(("x", "y"))
        tuple(("x", "y"))
        range(3)
    mapping = dict(name = "Vid", starost = 26)
    set = set (("x", "y")), frozenset
    Boolean = bool(1) -> True == 1 / false == 0
		Nonempty string = True; Nonzero number == True
		Empty (), [], {}, "", 0, None, False == False
		Function return True; return False
    Binary = bytes, bytearray, memoryview
    None = NoneType
	
Operators! https://www.w3schools.com/python/python_operators.asp
	Operatorji: + - * / %(ostanek pri deljenju) **(eksponent) //(celoštevilsko deljenje)
	Assignment operator: x += 1 -> x = x+1 in drugi operatorji
	Comparison: ==, !=, <>..., 
	Logical: and, or, not
	Identity -> Is same (with memory aloc): is, is not
	Membership -> sequence in obj: in, not in
	Bitwise: &(AND), |(OR), ^(XOR), ~(NOT), << Zero Fill left shift?, >>...


Git and commands:
    Ctrl+Shift+P = command pallet.
        Rename branch
        New Branch
        clone - Clone from github repos

Change for Commit - No Longer comment

QT Notes:
Every QT holds one QApplication -> QApplication.exec_()

XML parsing

Testi
pytest
tests folder daš .py file. "test_" jih zazna plugin, znotrej funkcije "test_"
Fixture -> da se pred kodo odtesta nekej zgodi
    conftest.py so notri definirani
    @pytest.Fixture
    notri daš ime funkcije
        framework_connections kot fixture, ki ga
        test zazna kot input

    
    Arrange, or set up, the conditions for the test
    Act by calling some function or method
    !!Assert!! that some end condition is true

    . == pass
    F == fail
    E == unexpected exception


Poganjanje $pytest
    verbose -s

Kaj testirat. Test pa input da bo fail (funkcija rabi int, dobi str.)
    Typing -> metoda ki točno specificira type kot parametre
    npr. minimum_region_capacities: dict(tuple(float, float))
    ne bo failal, če napačen tip, IDE pa pomaga.

    Static typechecking != static code analysis = mypy
    preveri če so vse spremenljivke tapravega typa. Povezave spremenljivk morjo bit iste
    "assert"

Git 
    Visualisation: git log --graph --full-history --all --pretty=format:"%h%x09%d%x20%s"
    git log --oneline --decorate --graph
    git log # Get current log
    git comit
    git branch
        branch -d hotfix # Delete branch
    git checkout <branch> #
    git merge <branch> # Merge branch with HEAD file
        first checkout to main, then merge <branch>
    git status
    git stash branch <new branchname> # Creating a Branch from a Stash
    git stash # See what is stashed
    git stash apply # Stashed item applied

Precommit hook (googlej)
.git/hooks/precommit.py
Notri mu rečeš da požene flake8 (py skripta če pep-8). Install

Testiranje MVC -> kjer business se vse definira. Class in Fun k bojo delale stvari;
    test za to funkcijo (da more bit int, ne sme bit neg. etc.)
    WebInterface dobi xml, format pretvoriš v interen format (class) in tega passaš Business logiki.
    Če se kej spremeni na web, spremeniš samo del kode k dela scrapeanje

Uporabi @dataclass. Za hitro definiranje classa in hranjenje podatkov znotraj.
    Narediš class podatki, daš makro @dataclass.
    sam doda __init__
    Znotraj daš validatorje. float = attr.isv
    Dataclass validation z attrs
    ATTRS je kot dataclass s simpel validacijo

Pipeline -> coverage report. Kolk kode se je med testom pognalo.
    pytest-cov zgenerira coverage report

Python logging
    Logging, ne print!
        strated initialization
        fin -||-
        etc.

Exception handling 
    try -> če koda faila se požene except
    except. Povej katerega nej navrže. Lahko standardni
    Happy flow -> teče kot more.
    Unhappy flow -> nekej kar ni vredu. String, namesto int.
        najboljš da raise exception.
            attrs validatorji takoj raisal exception

PyPI uploadanje
Ko nardiš package, narediš pyproject.toml (is the new yaml)
    info o package: Ime, decription, version py, author, modul...
    Nujno za build package.
    Buildaš "python -m build", najde pyproject.toml file in ga zbuilda.
    tar.gz in .whl

Publishing package -> twine PyPI. Utility za publishing na repository.
python -m build potem pa twine upload -r ... komande, da uploada na repo.

packageana koda != github repository.
Repo/imeRepo/readme in setup py (namesto project toml)

